// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hapi/rudder/rudder.proto

package rudder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import release "k8s.io/helm/pkg/proto/hapi/release"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result_Status int32

const (
	// No status set
	Result_UNKNOWN Result_Status = 0
	// Operation was successful
	Result_SUCCESS Result_Status = 1
	// Operation had no results (e.g. upgrade identical, rollback to same, delete non-existent)
	Result_UNCHANGED Result_Status = 2
	// Operation failed
	Result_ERROR Result_Status = 3
)

var Result_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SUCCESS",
	2: "UNCHANGED",
	3: "ERROR",
}
var Result_Status_value = map[string]int32{
	"UNKNOWN":   0,
	"SUCCESS":   1,
	"UNCHANGED": 2,
	"ERROR":     3,
}

func (x Result_Status) String() string {
	return proto.EnumName(Result_Status_name, int32(x))
}
func (Result_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{0, 0}
}

type Result struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Log                  []string `protobuf:"bytes,2,rep,name=log,proto3" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Result) GetLog() []string {
	if m != nil {
		return m.Log
	}
	return nil
}

type VersionReleaseRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionReleaseRequest) Reset()         { *m = VersionReleaseRequest{} }
func (m *VersionReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*VersionReleaseRequest) ProtoMessage()    {}
func (*VersionReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{1}
}
func (m *VersionReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionReleaseRequest.Unmarshal(m, b)
}
func (m *VersionReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *VersionReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionReleaseRequest.Merge(dst, src)
}
func (m *VersionReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_VersionReleaseRequest.Size(m)
}
func (m *VersionReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionReleaseRequest proto.InternalMessageInfo

type VersionReleaseResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionReleaseResponse) Reset()         { *m = VersionReleaseResponse{} }
func (m *VersionReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*VersionReleaseResponse) ProtoMessage()    {}
func (*VersionReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{2}
}
func (m *VersionReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionReleaseResponse.Unmarshal(m, b)
}
func (m *VersionReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *VersionReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionReleaseResponse.Merge(dst, src)
}
func (m *VersionReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_VersionReleaseResponse.Size(m)
}
func (m *VersionReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionReleaseResponse proto.InternalMessageInfo

func (m *VersionReleaseResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionReleaseResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type InstallReleaseRequest struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstallReleaseRequest) Reset()         { *m = InstallReleaseRequest{} }
func (m *InstallReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*InstallReleaseRequest) ProtoMessage()    {}
func (*InstallReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{3}
}
func (m *InstallReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallReleaseRequest.Unmarshal(m, b)
}
func (m *InstallReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *InstallReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallReleaseRequest.Merge(dst, src)
}
func (m *InstallReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_InstallReleaseRequest.Size(m)
}
func (m *InstallReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallReleaseRequest proto.InternalMessageInfo

func (m *InstallReleaseRequest) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type InstallReleaseResponse struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Result               *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *InstallReleaseResponse) Reset()         { *m = InstallReleaseResponse{} }
func (m *InstallReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*InstallReleaseResponse) ProtoMessage()    {}
func (*InstallReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{4}
}
func (m *InstallReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallReleaseResponse.Unmarshal(m, b)
}
func (m *InstallReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *InstallReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallReleaseResponse.Merge(dst, src)
}
func (m *InstallReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_InstallReleaseResponse.Size(m)
}
func (m *InstallReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InstallReleaseResponse proto.InternalMessageInfo

func (m *InstallReleaseResponse) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *InstallReleaseResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteReleaseRequest struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeleteReleaseRequest) Reset()         { *m = DeleteReleaseRequest{} }
func (m *DeleteReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteReleaseRequest) ProtoMessage()    {}
func (*DeleteReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{5}
}
func (m *DeleteReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReleaseRequest.Unmarshal(m, b)
}
func (m *DeleteReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReleaseRequest.Merge(dst, src)
}
func (m *DeleteReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteReleaseRequest.Size(m)
}
func (m *DeleteReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReleaseRequest proto.InternalMessageInfo

func (m *DeleteReleaseRequest) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type DeleteReleaseResponse struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Result               *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeleteReleaseResponse) Reset()         { *m = DeleteReleaseResponse{} }
func (m *DeleteReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteReleaseResponse) ProtoMessage()    {}
func (*DeleteReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{6}
}
func (m *DeleteReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReleaseResponse.Unmarshal(m, b)
}
func (m *DeleteReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReleaseResponse.Merge(dst, src)
}
func (m *DeleteReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteReleaseResponse.Size(m)
}
func (m *DeleteReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReleaseResponse proto.InternalMessageInfo

func (m *DeleteReleaseResponse) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *DeleteReleaseResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpgradeReleaseRequest struct {
	Current              *release.Release `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Target               *release.Release `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Timeout              int64            `protobuf:"varint,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Wait                 bool             `protobuf:"varint,4,opt,name=Wait,proto3" json:"Wait,omitempty"`
	Recreate             bool             `protobuf:"varint,5,opt,name=Recreate,proto3" json:"Recreate,omitempty"`
	Force                bool             `protobuf:"varint,6,opt,name=Force,proto3" json:"Force,omitempty"`
	CleanupOnFail        bool             `protobuf:"varint,7,opt,name=CleanupOnFail,proto3" json:"CleanupOnFail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpgradeReleaseRequest) Reset()         { *m = UpgradeReleaseRequest{} }
func (m *UpgradeReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeReleaseRequest) ProtoMessage()    {}
func (*UpgradeReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{7}
}
func (m *UpgradeReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeReleaseRequest.Unmarshal(m, b)
}
func (m *UpgradeReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *UpgradeReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeReleaseRequest.Merge(dst, src)
}
func (m *UpgradeReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_UpgradeReleaseRequest.Size(m)
}
func (m *UpgradeReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeReleaseRequest proto.InternalMessageInfo

func (m *UpgradeReleaseRequest) GetCurrent() *release.Release {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *UpgradeReleaseRequest) GetTarget() *release.Release {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *UpgradeReleaseRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *UpgradeReleaseRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *UpgradeReleaseRequest) GetRecreate() bool {
	if m != nil {
		return m.Recreate
	}
	return false
}

func (m *UpgradeReleaseRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *UpgradeReleaseRequest) GetCleanupOnFail() bool {
	if m != nil {
		return m.CleanupOnFail
	}
	return false
}

type UpgradeReleaseResponse struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Result               *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpgradeReleaseResponse) Reset()         { *m = UpgradeReleaseResponse{} }
func (m *UpgradeReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeReleaseResponse) ProtoMessage()    {}
func (*UpgradeReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{8}
}
func (m *UpgradeReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeReleaseResponse.Unmarshal(m, b)
}
func (m *UpgradeReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *UpgradeReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeReleaseResponse.Merge(dst, src)
}
func (m *UpgradeReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_UpgradeReleaseResponse.Size(m)
}
func (m *UpgradeReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeReleaseResponse proto.InternalMessageInfo

func (m *UpgradeReleaseResponse) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *UpgradeReleaseResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type RollbackReleaseRequest struct {
	Current              *release.Release `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Target               *release.Release `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Timeout              int64            `protobuf:"varint,3,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Wait                 bool             `protobuf:"varint,4,opt,name=Wait,proto3" json:"Wait,omitempty"`
	Recreate             bool             `protobuf:"varint,5,opt,name=Recreate,proto3" json:"Recreate,omitempty"`
	Force                bool             `protobuf:"varint,6,opt,name=Force,proto3" json:"Force,omitempty"`
	CleanupOnFail        bool             `protobuf:"varint,7,opt,name=CleanupOnFail,proto3" json:"CleanupOnFail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RollbackReleaseRequest) Reset()         { *m = RollbackReleaseRequest{} }
func (m *RollbackReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackReleaseRequest) ProtoMessage()    {}
func (*RollbackReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{9}
}
func (m *RollbackReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackReleaseRequest.Unmarshal(m, b)
}
func (m *RollbackReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackReleaseRequest.Marshal(b, m, deterministic)
}
func (dst *RollbackReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackReleaseRequest.Merge(dst, src)
}
func (m *RollbackReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackReleaseRequest.Size(m)
}
func (m *RollbackReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackReleaseRequest proto.InternalMessageInfo

func (m *RollbackReleaseRequest) GetCurrent() *release.Release {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *RollbackReleaseRequest) GetTarget() *release.Release {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RollbackReleaseRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RollbackReleaseRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

func (m *RollbackReleaseRequest) GetRecreate() bool {
	if m != nil {
		return m.Recreate
	}
	return false
}

func (m *RollbackReleaseRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *RollbackReleaseRequest) GetCleanupOnFail() bool {
	if m != nil {
		return m.CleanupOnFail
	}
	return false
}

type RollbackReleaseResponse struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Result               *Result          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RollbackReleaseResponse) Reset()         { *m = RollbackReleaseResponse{} }
func (m *RollbackReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*RollbackReleaseResponse) ProtoMessage()    {}
func (*RollbackReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{10}
}
func (m *RollbackReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackReleaseResponse.Unmarshal(m, b)
}
func (m *RollbackReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackReleaseResponse.Marshal(b, m, deterministic)
}
func (dst *RollbackReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackReleaseResponse.Merge(dst, src)
}
func (m *RollbackReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_RollbackReleaseResponse.Size(m)
}
func (m *RollbackReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackReleaseResponse proto.InternalMessageInfo

func (m *RollbackReleaseResponse) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *RollbackReleaseResponse) GetResult() *Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReleaseStatusRequest struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReleaseStatusRequest) Reset()         { *m = ReleaseStatusRequest{} }
func (m *ReleaseStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseStatusRequest) ProtoMessage()    {}
func (*ReleaseStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{11}
}
func (m *ReleaseStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseStatusRequest.Unmarshal(m, b)
}
func (m *ReleaseStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseStatusRequest.Marshal(b, m, deterministic)
}
func (dst *ReleaseStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseStatusRequest.Merge(dst, src)
}
func (m *ReleaseStatusRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseStatusRequest.Size(m)
}
func (m *ReleaseStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseStatusRequest proto.InternalMessageInfo

func (m *ReleaseStatusRequest) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type ReleaseStatusResponse struct {
	Release              *release.Release `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Info                 *release.Info    `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReleaseStatusResponse) Reset()         { *m = ReleaseStatusResponse{} }
func (m *ReleaseStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseStatusResponse) ProtoMessage()    {}
func (*ReleaseStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rudder_dd8cdbe38a210d28, []int{12}
}
func (m *ReleaseStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseStatusResponse.Unmarshal(m, b)
}
func (m *ReleaseStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseStatusResponse.Marshal(b, m, deterministic)
}
func (dst *ReleaseStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseStatusResponse.Merge(dst, src)
}
func (m *ReleaseStatusResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseStatusResponse.Size(m)
}
func (m *ReleaseStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseStatusResponse proto.InternalMessageInfo

func (m *ReleaseStatusResponse) GetRelease() *release.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *ReleaseStatusResponse) GetInfo() *release.Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "hapi.services.rudder.Result")
	proto.RegisterType((*VersionReleaseRequest)(nil), "hapi.services.rudder.VersionReleaseRequest")
	proto.RegisterType((*VersionReleaseResponse)(nil), "hapi.services.rudder.VersionReleaseResponse")
	proto.RegisterType((*InstallReleaseRequest)(nil), "hapi.services.rudder.InstallReleaseRequest")
	proto.RegisterType((*InstallReleaseResponse)(nil), "hapi.services.rudder.InstallReleaseResponse")
	proto.RegisterType((*DeleteReleaseRequest)(nil), "hapi.services.rudder.DeleteReleaseRequest")
	proto.RegisterType((*DeleteReleaseResponse)(nil), "hapi.services.rudder.DeleteReleaseResponse")
	proto.RegisterType((*UpgradeReleaseRequest)(nil), "hapi.services.rudder.UpgradeReleaseRequest")
	proto.RegisterType((*UpgradeReleaseResponse)(nil), "hapi.services.rudder.UpgradeReleaseResponse")
	proto.RegisterType((*RollbackReleaseRequest)(nil), "hapi.services.rudder.RollbackReleaseRequest")
	proto.RegisterType((*RollbackReleaseResponse)(nil), "hapi.services.rudder.RollbackReleaseResponse")
	proto.RegisterType((*ReleaseStatusRequest)(nil), "hapi.services.rudder.ReleaseStatusRequest")
	proto.RegisterType((*ReleaseStatusResponse)(nil), "hapi.services.rudder.ReleaseStatusResponse")
	proto.RegisterEnum("hapi.services.rudder.Result_Status", Result_Status_name, Result_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReleaseModuleServiceClient is the client API for ReleaseModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseModuleServiceClient interface {
	Version(ctx context.Context, in *VersionReleaseRequest, opts ...grpc.CallOption) (*VersionReleaseResponse, error)
	// InstallRelease requests installation of a chart as a new release.
	InstallRelease(ctx context.Context, in *InstallReleaseRequest, opts ...grpc.CallOption) (*InstallReleaseResponse, error)
	// DeleteRelease requests deletion of a named release.
	DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseResponse, error)
	// RollbackRelease rolls back a release to a previous version.
	RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*RollbackReleaseResponse, error)
	// UpgradeRelease updates release content.
	UpgradeRelease(ctx context.Context, in *UpgradeReleaseRequest, opts ...grpc.CallOption) (*UpgradeReleaseResponse, error)
	// ReleaseStatus retrieves release status.
	ReleaseStatus(ctx context.Context, in *ReleaseStatusRequest, opts ...grpc.CallOption) (*ReleaseStatusResponse, error)
}

type releaseModuleServiceClient struct {
	cc *grpc.ClientConn
}

func NewReleaseModuleServiceClient(cc *grpc.ClientConn) ReleaseModuleServiceClient {
	return &releaseModuleServiceClient{cc}
}

func (c *releaseModuleServiceClient) Version(ctx context.Context, in *VersionReleaseRequest, opts ...grpc.CallOption) (*VersionReleaseResponse, error) {
	out := new(VersionReleaseResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseModuleServiceClient) InstallRelease(ctx context.Context, in *InstallReleaseRequest, opts ...grpc.CallOption) (*InstallReleaseResponse, error) {
	out := new(InstallReleaseResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/InstallRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseModuleServiceClient) DeleteRelease(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseResponse, error) {
	out := new(DeleteReleaseResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/DeleteRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseModuleServiceClient) RollbackRelease(ctx context.Context, in *RollbackReleaseRequest, opts ...grpc.CallOption) (*RollbackReleaseResponse, error) {
	out := new(RollbackReleaseResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/RollbackRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseModuleServiceClient) UpgradeRelease(ctx context.Context, in *UpgradeReleaseRequest, opts ...grpc.CallOption) (*UpgradeReleaseResponse, error) {
	out := new(UpgradeReleaseResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/UpgradeRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseModuleServiceClient) ReleaseStatus(ctx context.Context, in *ReleaseStatusRequest, opts ...grpc.CallOption) (*ReleaseStatusResponse, error) {
	out := new(ReleaseStatusResponse)
	err := c.cc.Invoke(ctx, "/hapi.services.rudder.ReleaseModuleService/ReleaseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseModuleServiceServer is the server API for ReleaseModuleService service.
type ReleaseModuleServiceServer interface {
	Version(context.Context, *VersionReleaseRequest) (*VersionReleaseResponse, error)
	// InstallRelease requests installation of a chart as a new release.
	InstallRelease(context.Context, *InstallReleaseRequest) (*InstallReleaseResponse, error)
	// DeleteRelease requests deletion of a named release.
	DeleteRelease(context.Context, *DeleteReleaseRequest) (*DeleteReleaseResponse, error)
	// RollbackRelease rolls back a release to a previous version.
	RollbackRelease(context.Context, *RollbackReleaseRequest) (*RollbackReleaseResponse, error)
	// UpgradeRelease updates release content.
	UpgradeRelease(context.Context, *UpgradeReleaseRequest) (*UpgradeReleaseResponse, error)
	// ReleaseStatus retrieves release status.
	ReleaseStatus(context.Context, *ReleaseStatusRequest) (*ReleaseStatusResponse, error)
}

func RegisterReleaseModuleServiceServer(s *grpc.Server, srv ReleaseModuleServiceServer) {
	s.RegisterService(&_ReleaseModuleService_serviceDesc, srv)
}

func _ReleaseModuleService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).Version(ctx, req.(*VersionReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseModuleService_InstallRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).InstallRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/InstallRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).InstallRelease(ctx, req.(*InstallReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseModuleService_DeleteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).DeleteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/DeleteRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).DeleteRelease(ctx, req.(*DeleteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseModuleService_RollbackRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).RollbackRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/RollbackRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).RollbackRelease(ctx, req.(*RollbackReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseModuleService_UpgradeRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).UpgradeRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/UpgradeRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).UpgradeRelease(ctx, req.(*UpgradeReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseModuleService_ReleaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseModuleServiceServer).ReleaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hapi.services.rudder.ReleaseModuleService/ReleaseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseModuleServiceServer).ReleaseStatus(ctx, req.(*ReleaseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseModuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hapi.services.rudder.ReleaseModuleService",
	HandlerType: (*ReleaseModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ReleaseModuleService_Version_Handler,
		},
		{
			MethodName: "InstallRelease",
			Handler:    _ReleaseModuleService_InstallRelease_Handler,
		},
		{
			MethodName: "DeleteRelease",
			Handler:    _ReleaseModuleService_DeleteRelease_Handler,
		},
		{
			MethodName: "RollbackRelease",
			Handler:    _ReleaseModuleService_RollbackRelease_Handler,
		},
		{
			MethodName: "UpgradeRelease",
			Handler:    _ReleaseModuleService_UpgradeRelease_Handler,
		},
		{
			MethodName: "ReleaseStatus",
			Handler:    _ReleaseModuleService_ReleaseStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hapi/rudder/rudder.proto",
}

func init() { proto.RegisterFile("hapi/rudder/rudder.proto", fileDescriptor_rudder_dd8cdbe38a210d28) }

var fileDescriptor_rudder_dd8cdbe38a210d28 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0xc6, 0x69, 0xa6, 0x2a, 0x44, 0xab, 0xba, 0xb5, 0x2c, 0x0e, 0x91, 0x85, 0x50,
	0x44, 0xa9, 0x2b, 0x15, 0x8e, 0x5c, 0x20, 0xfd, 0x14, 0x22, 0x95, 0x36, 0x84, 0x4a, 0xdc, 0xb6,
	0xc9, 0x24, 0x18, 0x36, 0xb6, 0x59, 0xaf, 0x7b, 0x04, 0x7e, 0x0d, 0xff, 0x12, 0x84, 0xec, 0xb5,
	0x23, 0x6c, 0xd6, 0x22, 0x14, 0x29, 0x17, 0x4e, 0xde, 0xd9, 0x79, 0x9d, 0x9d, 0xf7, 0x76, 0xf6,
	0x35, 0x60, 0xbf, 0x67, 0x91, 0x7f, 0x24, 0x92, 0xe9, 0x14, 0x45, 0xfe, 0xf1, 0x22, 0x11, 0xca,
	0x90, 0xec, 0xa6, 0x19, 0x2f, 0x46, 0x71, 0xeb, 0x4f, 0x30, 0xf6, 0x54, 0xce, 0xd9, 0x57, 0x78,
	0xe4, 0xc8, 0x62, 0x3c, 0xf2, 0x83, 0x59, 0xa8, 0xe0, 0x8e, 0x53, 0x4a, 0xe4, 0x5f, 0x95, 0x73,
	0x39, 0x98, 0x14, 0xe3, 0x84, 0x4b, 0x42, 0x60, 0x33, 0xfd, 0x1b, 0xdb, 0xe8, 0x19, 0xfd, 0x0e,
	0xcd, 0xd6, 0xa4, 0x0b, 0x4d, 0x1e, 0xce, 0xed, 0x8d, 0x5e, 0xb3, 0xdf, 0xa1, 0xe9, 0xd2, 0x7d,
	0x0e, 0xe6, 0x48, 0x32, 0x99, 0xc4, 0x64, 0x1b, 0xda, 0xe3, 0xe1, 0xab, 0xe1, 0xd5, 0xf5, 0xb0,
	0xdb, 0x48, 0x83, 0xd1, 0x78, 0x30, 0x38, 0x1d, 0x8d, 0xba, 0x06, 0xd9, 0x81, 0xce, 0x78, 0x38,
	0xb8, 0x78, 0x31, 0x3c, 0x3f, 0x3d, 0xe9, 0x6e, 0x90, 0x0e, 0xb4, 0x4e, 0x29, 0xbd, 0xa2, 0xdd,
	0xa6, 0xbb, 0x0f, 0xd6, 0x5b, 0x14, 0xb1, 0x1f, 0x06, 0x54, 0x75, 0x41, 0xf1, 0x53, 0x82, 0xb1,
	0x74, 0xcf, 0x60, 0xaf, 0x9a, 0x88, 0xa3, 0x30, 0x88, 0x31, 0x6d, 0x2b, 0x60, 0x0b, 0x2c, 0xda,
	0x4a, 0xd7, 0xc4, 0x86, 0xf6, 0xad, 0x42, 0xdb, 0x1b, 0xd9, 0x76, 0x11, 0xba, 0x17, 0x60, 0x5d,
	0x06, 0xb1, 0x64, 0x9c, 0x97, 0x0f, 0x20, 0x47, 0xd0, 0xce, 0x89, 0x67, 0x95, 0xb6, 0x8f, 0x2d,
	0x2f, 0x13, 0xb1, 0x50, 0xa3, 0x80, 0x17, 0x28, 0xf7, 0x0b, 0xec, 0x55, 0x2b, 0xe5, 0x1d, 0xfd,
	0x6d, 0x29, 0xf2, 0x0c, 0x4c, 0x91, 0x69, 0x9c, 0x75, 0xbb, 0x7d, 0xfc, 0xc0, 0xd3, 0xdd, 0x9f,
	0xa7, 0xee, 0x81, 0xe6, 0x58, 0xf7, 0x1c, 0x76, 0x4f, 0x90, 0xa3, 0xc4, 0x7f, 0x65, 0xf2, 0x19,
	0xac, 0x4a, 0xa1, 0xf5, 0x12, 0xf9, 0x6e, 0x80, 0x35, 0x8e, 0xe6, 0x82, 0x4d, 0x35, 0x54, 0x26,
	0x89, 0x10, 0x18, 0xc8, 0x3f, 0x34, 0x90, 0xa3, 0xc8, 0x21, 0x98, 0x92, 0x89, 0x39, 0x16, 0x0d,
	0xd4, 0xe0, 0x73, 0x50, 0x3a, 0x27, 0x6f, 0xfc, 0x05, 0x86, 0x89, 0xb4, 0x9b, 0x3d, 0xa3, 0xdf,
	0xa4, 0x45, 0x98, 0x4e, 0xd5, 0x35, 0xf3, 0xa5, 0xbd, 0xd9, 0x33, 0xfa, 0x5b, 0x34, 0x5b, 0x13,
	0x07, 0xb6, 0x28, 0x4e, 0x04, 0x32, 0x89, 0x76, 0x2b, 0xdb, 0x5f, 0xc6, 0x64, 0x17, 0x5a, 0x67,
	0xa1, 0x98, 0xa0, 0x6d, 0x66, 0x09, 0x15, 0x90, 0x87, 0xb0, 0x33, 0xe0, 0xc8, 0x82, 0x24, 0xba,
	0x0a, 0xce, 0x98, 0xcf, 0xed, 0x76, 0x96, 0x2d, 0x6f, 0xa6, 0x93, 0x54, 0xa5, 0xbf, 0xde, 0x0b,
	0xf8, 0x61, 0xc0, 0x1e, 0x0d, 0x39, 0xbf, 0x61, 0x93, 0x8f, 0xff, 0xe5, 0x0d, 0x7c, 0x35, 0x60,
	0xff, 0x37, 0x01, 0xd6, 0xfe, 0x9a, 0xf3, 0x4a, 0xca, 0x3e, 0xef, 0xfc, 0x9a, 0x23, 0xb0, 0x2a,
	0x85, 0xee, 0x4a, 0xe4, 0x51, 0x6e, 0xf8, 0x8a, 0x06, 0x29, 0xa3, 0x2f, 0x83, 0x59, 0xa8, 0xfe,
	0x09, 0x1c, 0x7f, 0x6b, 0x2d, 0x7b, 0x7f, 0x1d, 0x4e, 0x13, 0x8e, 0x23, 0x45, 0x95, 0xcc, 0xa0,
	0x9d, 0x9b, 0x36, 0x39, 0xd0, 0x8b, 0xa0, 0x35, 0x7b, 0xe7, 0xc9, 0x6a, 0x60, 0xc5, 0xcb, 0x6d,
	0x90, 0x05, 0xdc, 0x2b, 0x5b, 0x71, 0xdd, 0x71, 0x5a, 0xeb, 0xaf, 0x3b, 0x4e, 0xef, 0xee, 0x6e,
	0x83, 0x7c, 0x80, 0x9d, 0x92, 0x5f, 0x92, 0xc7, 0xfa, 0x02, 0x3a, 0x77, 0x76, 0x0e, 0x56, 0xc2,
	0x2e, 0xcf, 0x8a, 0xe0, 0x7e, 0x65, 0x30, 0x49, 0x4d, 0xbb, 0xfa, 0x07, 0xec, 0x1c, 0xae, 0x88,
	0xfe, 0x55, 0xcc, 0xb2, 0x1b, 0xd5, 0x89, 0xa9, 0xb5, 0xec, 0x3a, 0x31, 0xf5, 0x06, 0xa7, 0xc4,
	0x2c, 0x8d, 0x6b, 0x9d, 0x98, 0xba, 0xc7, 0x51, 0x27, 0xa6, 0x76, 0xfe, 0xdd, 0xc6, 0xcb, 0xad,
	0x77, 0xa6, 0x42, 0xdc, 0x98, 0xd9, 0x8f, 0x9b, 0xa7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe2,
	0x9e, 0x21, 0x0d, 0x43, 0x09, 0x00, 0x00,
}
