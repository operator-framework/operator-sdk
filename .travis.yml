language: go
go_import_path: github.com/operator-framework/operator-sdk
sudo: required

services:
- docker

go:
- 1.10.1

env:
- CHANGE_MINIKUBE_NONE_USER=true

before_script:
- go get -u github.com/golang/dep/cmd/dep
- dep ensure
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.9.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- sudo minikube start --vm-driver=none --kubernetes-version=v1.9.0
# Fix the kubectl context, as it's often stale.
- minikube update-context
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
# Create example operator directory
- mkdir -p $GOPATH/src/github.com/example-inc

install: 
- go get -t -d ./...

script:
# Unit test and verify formatting
- go test ./...
- go vet ./...
- make install
# Create example operator
- cd $GOPATH/src/github.com/example-inc
- operator-sdk new memcached-operator --api-version=cache.example.com/v1alpha1 --kind=Memcached
- cd memcached-operator
- curl https://raw.githubusercontent.com/operator-framework/operator-sdk/master/example/memcached-operator/handler.go.tmpl -o pkg/stub/handler.go
- head -n -6 pkg/apis/cache/v1alpha1/types.go > tmp.txt
- mv tmp.txt pkg/apis/cache/v1alpha1/types.go
- echo 'type MemcachedSpec struct {	Size int32 `json:"size"`}' >> pkg/apis/cache/v1alpha1/types.go
- echo 'type MemcachedStatus struct {Nodes []string `json:"nodes"`}' >> pkg/apis/cache/v1alpha1/types.go
- operator-sdk generate k8s
- operator-sdk build quay.io/example/memcached-operator:v0.0.1
- sed -e 's/imagePullPolicy. Always/imagePullPolicy. Never/g' deploy/operator.yaml
- kubectl create -f deploy/rbac.yaml
- kubectl create -f deploy/crd.yaml
- kubectl create -f deploy/operator.yaml
- kubectl get deployment

after_success:
- echo 'Build succeeded, operator was generated, memcached operator is running on minikube, and unit/integration tests pass'

after_failure:
- echo 'Build failed, operator failed to generate, memcached operator is not running on minikube, or unit/integration tests failed'