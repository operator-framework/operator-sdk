// Code generated by counterfeiter. DO NOT EDIT.
package generatefakes

import (
	"io"
	"sync"

	"github.com/operator-framework/operator-sdk/internal/generate"
)

type FakeGeneratorSDK struct {
	GeneratePackageManifestStub        func(string, string, io.Writer, ...*generate.PkgOptions) error
	generatePackageManifestMutex       sync.RWMutex
	generatePackageManifestArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Writer
		arg4 []*generate.PkgOptions
	}
	generatePackageManifestReturns struct {
		result1 error
	}
	generatePackageManifestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGeneratorSDK) GeneratePackageManifest(arg1 string, arg2 string, arg3 io.Writer, arg4 ...*generate.PkgOptions) error {
	fake.generatePackageManifestMutex.Lock()
	ret, specificReturn := fake.generatePackageManifestReturnsOnCall[len(fake.generatePackageManifestArgsForCall)]
	fake.generatePackageManifestArgsForCall = append(fake.generatePackageManifestArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Writer
		arg4 []*generate.PkgOptions
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GeneratePackageManifest", []interface{}{arg1, arg2, arg3, arg4})
	fake.generatePackageManifestMutex.Unlock()
	if fake.GeneratePackageManifestStub != nil {
		return fake.GeneratePackageManifestStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.generatePackageManifestReturns
	return fakeReturns.result1
}

func (fake *FakeGeneratorSDK) GeneratePackageManifestCallCount() int {
	fake.generatePackageManifestMutex.RLock()
	defer fake.generatePackageManifestMutex.RUnlock()
	return len(fake.generatePackageManifestArgsForCall)
}

func (fake *FakeGeneratorSDK) GeneratePackageManifestCalls(stub func(string, string, io.Writer, ...*generate.PkgOptions) error) {
	fake.generatePackageManifestMutex.Lock()
	defer fake.generatePackageManifestMutex.Unlock()
	fake.GeneratePackageManifestStub = stub
}

func (fake *FakeGeneratorSDK) GeneratePackageManifestArgsForCall(i int) (string, string, io.Writer, []*generate.PkgOptions) {
	fake.generatePackageManifestMutex.RLock()
	defer fake.generatePackageManifestMutex.RUnlock()
	argsForCall := fake.generatePackageManifestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGeneratorSDK) GeneratePackageManifestReturns(result1 error) {
	fake.generatePackageManifestMutex.Lock()
	defer fake.generatePackageManifestMutex.Unlock()
	fake.GeneratePackageManifestStub = nil
	fake.generatePackageManifestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGeneratorSDK) GeneratePackageManifestReturnsOnCall(i int, result1 error) {
	fake.generatePackageManifestMutex.Lock()
	defer fake.generatePackageManifestMutex.Unlock()
	fake.GeneratePackageManifestStub = nil
	if fake.generatePackageManifestReturnsOnCall == nil {
		fake.generatePackageManifestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.generatePackageManifestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGeneratorSDK) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generatePackageManifestMutex.RLock()
	defer fake.generatePackageManifestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGeneratorSDK) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ generate.GeneratorSDK = new(FakeGeneratorSDK)
