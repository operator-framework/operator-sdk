---

- name: Verify
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'crds/ansible_v1alpha1_memcached_cr.yaml'])) | from_yaml }}"
  tasks:

    - name: debug memcached lookup
      debug:
        var: deploy
      vars:
        deploy: '{{ lookup("k8s",
          kind="Deployment",
          api_version="apps/v1",
          namespace=namespace,
          label_selector="app=memcached"
        )}}'

    - name: Wait 2 minutes for memcached deployment
      debug:
        var: deploy
      until: deploy and deploy.status and deploy.status.replicas == deploy.status.get("availableReplicas", 0)
      retries: 12
      delay: 10
      vars:
        deploy: '{{ lookup("k8s",
          kind="Deployment",
          api_version="apps/v1",
          namespace=namespace,
          label_selector="app=memcached"
        )}}'

    - name: Create ConfigMap that the Operator should delete
      k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: deleteme
            namespace: '{{ namespace }}'
          data:
            delete: me

    - name: debug CR lookup
      debug:
        var: cr
      vars:
        deploy: '{{ lookup("k8s",
          kind=custom_resource.kind,
          api_version=custom_resource.apiVersion,
          namespace=namespace,
          resource_name=custom_resource.metadata.name
        )}}'

    - name: Verify custom status exists
      assert:
        that: cr.resources[0].status.get("test") == "hello world"
      when: cr is defined
    - when: molecule_yml.scenario.name == "test-local"
      block:
      - name: Restart the operator by killing the pod
        k8s:
          state: absent
          definition:
            api_version: v1
            kind: Pod
            metadata:
              namespace: '{{ namespace }}'
              name: '{{ pod.metadata.name }}'
        vars:
          pod: '{{ q("k8s", api_version="v1", kind="Pod", namespace=namespace, label_selector="name=memcached-operator").0 }}'

      - name: Wait 2 minutes for operator deployment
        debug:
          var: deploy
        until: deploy and deploy.status and deploy.status.replicas == deploy.status.get("availableReplicas", 0)
        retries: 12
        delay: 10
        vars:
          deploy: '{{ lookup("k8s",
            kind="Deployment",
            api_version="apps/v1",
            namespace=namespace,
            resource_name="memcached-operator"
          )}}'

      - name: Wait for reconcilation to have a chance at finishing
        pause:
          seconds:  15

      - name: Delete the service that is created.
        k8s:
          kind: Service
          api_version: v1
          namespace: '{{ namespace }}'
          name: test-service
          state: absent

      - name: Verify that test-service was re-created
        debug:
          var: service
        until: service
        retries: 12
        delay: 10
        vars:
          service: '{{ lookup("k8s",
            kind="Service",
            api_version="v1",
            namespace=namespace,
            resource_name="test-service",
          )}}'

    - name: Delete the custom resource
      k8s:
        state: absent
        namespace: '{{ namespace }}'
        definition: '{{ custom_resource }}'
    # This will verify that the `secret` role was executed
    - name: Verify that test-service was created
      assert:
        that: lookup('k8s', kind='Service', api_version='v1', namespace=namespace, resource_name='test-service')

    - name: Delete the custom resource
      k8s:
        state: absent
        namespace: '{{ namespace }}'
        definition: '{{ custom_resource }}'

    - name: Wait for the custom resource to be deleted
      k8s_facts:
        api_version: '{{ custom_resource.apiVersion }}'
        kind: '{{ custom_resource.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ custom_resource.metadata.name }}'
      register: cr
      retries: 10
      delay: 2
      until: not cr.resources
      failed_when: cr.resources

    - name: Verify the Deployment was deleted
      assert:
        that: not lookup('k8s', kind='Deployment', api_version='apps/v1', namespace=namespace, label_selector='app=memcached')
      retries: 10
      delay: 3
