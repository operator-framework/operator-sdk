package bundle

import (
	"errors"
	"os"
	"path/filepath"
	"strings"

	"github.com/operator-framework/operator-registry/pkg/lib/bundle"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

// newBundleBuildCmd returns a command that will build operator bundle image.
func newBundleBuildCmd() *cobra.Command {
	c := bundleCmd{}
	cmd := &cobra.Command{
		Use:   "build",
		Short: "Build an operator bundle image",
		Long: `The 'operator-sdk bundle build' command will build an operator
bundle image containing operator metadata and manifests, tagged with the
provided image tag. Metadata generated by this command defines this image
and should not be modified.

To write metadata and a bundle image Dockerfile to disk, set '--generate-only[=true]'
Bundle metadata will be generated in <directory-arg>/metadata, and the Dockerfile
in <directory-arg>. This flag is useful if you want to build the operator's
bundle image manually.

NOTE: bundle images are not runnable.
`,
		Example: `The following command will build a test-operator bundle image using Docker.
This image will contain manifests for package channels 'stable' and 'beta':

$ operator-sdk bundle build \
    --directory ./deploy/olm-catalog/test-operator \
    --tag quay.io/example/operator:v0.1.0 \
    --package test-operator \
    --channels stable,beta \
    --default stable \
    --overwrite
`,
		RunE: func(cmd *cobra.Command, args []string) error {
			channels := strings.Join(c.channels, ",")
			if c.generateOnly {
				return bundle.GenerateFunc(c.directory, c.packageName, channels,
					c.channelDefault, true)
			}
			// An image tag is required for build only.
			if c.imageTag == "" {
				return errors.New("image tag must be set to build a bundle image")
			}
			// Clean up transient metadata and Dockerfile once the image is built,
			// as they are no longer needed.
			metaDir := filepath.Join(c.directory, "metadata")
			_, err := os.Stat(metaDir)
			metaExists := os.IsExist(err)
			dockerFile := filepath.Join(c.directory, "Dockerfile")
			_, err = os.Stat(dockerFile)
			dockerFileExists := os.IsExist(err)
			defer func() {
				if !metaExists {
					_ = os.RemoveAll(metaDir)
				}
				if !dockerFileExists {
					_ = os.RemoveAll(dockerFile)
				}
			}()
			return bundle.BuildFunc(c.directory, c.imageTag, c.imageBuilder,
				c.packageName, channels, c.channelDefault, c.overwrite)
		},
	}

	cmd.Flags().BoolVarP(&c.generateOnly, "generate-only", "g", false,
		"Generate metadata and a Dockerfile on disk without building the bundle image")
	cmd.Flags().StringVarP(&c.directory, "directory", "d", "",
		"The directory where bundle manifests are located")
	if err := cmd.MarkFlagRequired("directory"); err != nil {
		log.Fatalf("Failed to mark `directory` flag for `build` subcommand as required")
	}
	cmd.Flags().StringVarP(&c.packageName, "package", "p", "",
		"The name of the package that bundle image belongs to")
	if err := cmd.MarkFlagRequired("package"); err != nil {
		log.Fatalf("Failed to mark `package` flag for `build` subcommand as required")
	}
	cmd.Flags().StringSliceVarP(&c.channels, "channels", "c", nil,
		"The list of channels that bundle image belongs to")
	if err := cmd.MarkFlagRequired("channels"); err != nil {
		log.Fatalf("Failed to mark `channels` flag for `build` subcommand as required")
	}
	// Required only for 'build'.
	cmd.Flags().StringVarP(&c.imageTag, "tag", "t", "",
		"The image tag applied to the bundle image")

	cmd.Flags().StringVarP(&c.imageBuilder, "image-builder", "b", "docker",
		"Tool to build container images. One of: [docker, podman, buildah]")
	cmd.Flags().StringVarP(&c.channelDefault, "default", "e", "",
		"The default channel for the bundle image")
	cmd.Flags().BoolVarP(&c.overwrite, "overwrite", "o", false,
		"To overwrite annotations.yaml locally if existed. By default, overwrite is set to `false`.")

	return cmd
}
