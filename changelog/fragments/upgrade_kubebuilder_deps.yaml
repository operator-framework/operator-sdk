# entries is a list of entries to include in
# release notes and/or the migration guide
entries:
  - description: >
      (go/v4) For Go-based operators, a devcontainer is now available to allow users to
      develop and test the operator in a local environment and leverage on solutions
      such as VS Code Remote Containers and GitHub Codespaces to have a consistent
      development environment.
    kind: "addition"
    breaking: false
    migration:
      header: Add a devcontainer for Go-based operators
      body: |
        Create the devcontainer configuration in the root of the repository
        under `.devcontainer`. 
        1. Create a new directory called `.devcontainer` in the root of your project.
        2. Copy the contents of the [testdata/go/v4/memcached-operator/.devcontainer](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/.devcontainer)
           available in the Operator SDK repository for the tag release `v1.40.0`.
  - description: >
      (go/v4) For Go-based operators, new GitHub Actions are available to ensure better
      quality of their code.
    kind: "addition"
    breaking: false
    migration:
      header: Add new GitHub actions for Go-based operators
      body: |
        Add the actions configuration in the `.github/workflows` directory.
        The new actions are:
        - lint.yaml: Lint the code using golangci-lint
        - test.yaml: Run the tests using go test
        - test-e2e.yaml: Run the e2e tests using go test
        You can obtain this configuration to be added
        to your project by looking at the files available 
        in `testdata/go/v4/memcached-operator/.github/workflows` for this release.
        [testdata/go/v4/memcached-operator/.github/workflows](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/.github/workflows)
  - description: >
      (go/v4) For Go-based Operators, the `main.go` file has been enhanced to support real TLS certificates
      for both webhooks and the metrics server, with automated certificate rotation via cert-manager.
      This change improves security and aligns with production-grade best practices.

      Previously, setups relied on kube-rbac-proxy (deprecated in Operator SDK and Kubebuilder,
      see: [kubebuilder/discussions/3907](https://github.com/kubernetes-sigs/kubebuilder/discussions/3907)),
      which generated TLS certificates dynamically â€” a method no longer recommended for secure environments.
      The updated approach adopts static certificates managed by cert-manager.

      Additionally, integrations with Prometheus now support scraping metrics using the cert-manager
      generated certificates. A related fix was introduced to ensure that CA injection patches are only applied
      to CRDs with a conversion webhook, avoiding unnecessary annotations.

      To support these improvements, changes to `config/default/kustomization.yaml` are required. These include:
      configuring webhook and metrics server certificates, enabling Prometheus scraping with TLS, and
      correcting CA injection behavior.

      These updates also introduce flexible opt-in mechanisms, allowing users to selectively enable or disable:
      - TLS for the metrics server via cert-manager
      - TLS for webhooks via cert-manager
      - TLS configuration for Prometheus scraping

      Together, these changes are part of a broader effort to elevate the default security posture and configurability
      of Go-based operators.
    kind: "change"
    breaking: false
    migration:
      header: Update your project to properly support TLS certificates for webhooks and metrics server
      body: |
        1. Update the `main.go` file in your project to support TLS certificates for webhooks and metrics server.
        
        - Add the new flag definitions to accept custom certificate file paths and names:

            ```go
            func main() {
                ...
                var metricsCertPath, metricsCertName, metricsCertKey string
                var webhookCertPath, webhookCertName, webhookCertKey string
                ...
                flag.StringVar(&webhookCertPath, "webhook-cert-path", "", "The directory that contains the webhook certificate.")
                flag.StringVar(&webhookCertName, "webhook-cert-name", "tls.crt", "The name of the webhook certificate file.")
                flag.StringVar(&webhookCertKey, "webhook-cert-key", "tls.key", "The name of the webhook key file.")
                flag.StringVar(&metricsCertPath, "metrics-cert-path", "", "The directory that contains the metrics server certificate.")
                flag.StringVar(&metricsCertName, "metrics-cert-name", "tls.crt", "The name of the metrics server certificate file.")
                flag.StringVar(&metricsCertKey, "metrics-cert-key", "tls.key", "The name of the metrics server key file.")
            ```

        - After this conditional check:

            ```go
            if !enableHTTP2 {
                tlsOpts = append(tlsOpts, disableHTTP2)
            }
            ```

           Insert the following code to configure certificate watchers for webhooks and metrics:

            ```go
            var metricsCertWatcher, webhookCertWatcher *certwatcher.CertWatcher
            webhookTLSOpts := tlsOpts

            if len(webhookCertPath) > 0 {
                setupLog.Info("Initializing webhook certificate watcher using provided certificates",
                    "webhook-cert-path", webhookCertPath, "webhook-cert-name", webhookCertName, "webhook-cert-key", webhookCertKey)

                var err error
                webhookCertWatcher, err = certwatcher.New(
                    filepath.Join(webhookCertPath, webhookCertName),
                    filepath.Join(webhookCertPath, webhookCertKey),
                )
                if err != nil {
                    setupLog.Error(err, "Failed to initialize webhook certificate watcher")
                    os.Exit(1)
                }

                webhookTLSOpts = append(webhookTLSOpts, func(config *tls.Config) {
                    config.GetCertificate = webhookCertWatcher.GetCertificate
                })
            }
            ```

        - Update the webhook server TLS options:

            Replace:
            ```go
            TLSOpts: tlsOpts,
            ```

            With:
            ```go
            TLSOpts: webhookTLSOpts,
            ```

        - Before initializing the manager, configure the metrics certificate watcher if metrics certs are provided:

            ```go
            if len(metricsCertPath) > 0 {
                setupLog.Info("Initializing metrics certificate watcher using provided certificates",
                    "metrics-cert-path", metricsCertPath, "metrics-cert-name", metricsCertName, "metrics-cert-key", metricsCertKey)

                var err error
                metricsCertWatcher, err = certwatcher.New(
                    filepath.Join(metricsCertPath, metricsCertName),
                    filepath.Join(metricsCertPath, metricsCertKey),
                )
                if err != nil {
                    setupLog.Error(err, "Failed to initialize metrics certificate watcher")
                    os.Exit(1)
                }

                metricsServerOptions.TLSOpts = append(metricsServerOptions.TLSOpts, func(config *tls.Config) {
                    config.GetCertificate = metricsCertWatcher.GetCertificate
                })
            }

            mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
                ...
            })
            ```

        - Before calling `AddHealthzCheck`, ensure the certificate watchers are registered with the manager:

            ```go
            if metricsCertWatcher != nil {
                setupLog.Info("Adding metrics certificate watcher to manager")
                if err := mgr.Add(metricsCertWatcher); err != nil {
                    setupLog.Error(err, "Unable to add metrics certificate watcher to manager")
                    os.Exit(1)
                }
            }

            if webhookCertWatcher != nil {
                setupLog.Info("Adding webhook certificate watcher to manager")
                if err := mgr.Add(webhookCertWatcher); err != nil {
                    setupLog.Error(err, "Unable to add webhook certificate watcher to manager")
                    os.Exit(1)
                }
            }

            if err := mgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
                setupLog.Error(err, "Unable to set up health check")
                os.Exit(1)
            }
            ```

        Note that you can use as reference the `main.go` file available in the
        Operator SDK repository for the tag release `v1.40.0` to see how the code should look like,
        see:  [testdata/go/v4/memcached-operator/cmd/main.go](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/cmd/main.go)
        
        2. Add the new certificates in the `config/certmanager` directory:
        
        - Add the new files:
            - `certificate-metrics.yaml` with the content: [testdata/go/v4/memcached-operator/config/certmanager/certificate-metrics.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/certmanager/certificate-metrics.yaml)
            - `issuer.yaml` with the content: [testdata/go/v4/memcached-operator/config/certmanager/issuer.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/certmanager/issuer.yaml)
        
        - Rename certificate.yaml to `certificate-webhook.yaml`

        - Update the `kustomization.yaml` file to include the new files and remove the old ones:
            Replace: `- certificate.yaml`
        
            With:
            ```yaml
            resources:
              - certificate-metrics.yaml
              - certificate-webhook.yaml
              - issuer.yaml
            ```
            **NOTE**: You can see the complete file in the repository for the tag release `v1.40.0`: [testdata/go/v4/memcached-operator/config/certmanager/kustomization.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/certmanager/kustomization.yaml)

        3. Update the `config/default/kustomization.yaml` to allow work with the new options:
        
        Under `patches` ensure that you have:
        
        ```
        patches:
          ...
          # Uncomment the patches line if you enable Metrics and CertManager
          # [METRICS-WITH-CERTS] To enable metrics protected with certManager, uncomment the following line.
          # This patch will protect the metrics with certManager self-signed certs.
          - path: cert_metrics_manager_patch.yaml
            target:
              kind: Deployment
        
          # [WEBHOOK] To enable webhook, uncomment all the sections with [WEBHOOK] prefix including the one in
          # crd/kustomization.yaml
          - path: manager_webhook_patch.yaml
            target:
              kind: Deployment
        ...
        ```
        
        Under the replacements section, replace:
        
        ```yaml
          - source: # Add cert-manager annotation to ValidatingWebhookConfiguration, MutatingWebhookConfiguration and CRDs
            kind: Certificate
            group: cert-manager.io
            version: v1
            name: serving-cert # this name should match the one in certificate.yaml
            fieldPath: .metadata.namespace # namespace of the certificate CR
          targets:
            - select:
                kind: ValidatingWebhookConfiguration
              fieldPaths:
                - .metadata.annotations.[cert-manager.io/inject-ca-from]
              options:
                delimiter: '/'
                index: 0
                create: true
            - select:
                kind: MutatingWebhookConfiguration
              fieldPaths:
                - .metadata.annotations.[cert-manager.io/inject-ca-from]
              options:
                delimiter: '/'
                index: 0
                create: true
            - select:
                kind: CustomResourceDefinition
              fieldPaths:
                - .metadata.annotations.[cert-manager.io/inject-ca-from]
              options:
                delimiter: '/'
                index: 0
                create: true
        ```    
        
        With: the code from Kubebuilder samples [testdata/project-v4/config/default/kustomization.yaml](https://github.com/kubernetes-sigs/kubebuilder/blob/v4.5.2/testdata/project-v4/config/default/kustomization.yaml#L60-L155)

        **NOTE:** You can see the complete file in the repository for the tag release `v1.40.0`: [testdata/go/v4/memcached-operator/config/default/kustomization.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/default/kustomization.yaml)

        4. Add the new file to allow patch the certs for the metrics: [testdata/go/v4/memcached-operator/config/default/cert_metrics_manager_patch.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/default/cert_metrics_manager_patch.yaml)
        5. Replace the content of `config/default/manager_webhook_patch.yaml` with:  [testdata/go/v4/memcached-operator/config/default/config/default/manager_webhook_patch.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/default/config/default/manager_webhook_patch.yaml)
        6. Update the `config/manager/manager.yaml` to include the ports and volumes to allow the patch to work properly:
        
        ```
        ...
                 env:
                 - name: MEMCACHED_IMAGE
                   value: memcached:1.4.36-alpine
        +        ports: []
        ...
        ```
        
        ```
        ...
                   requests:
                     cpu: 10m
                     memory: 64Mi
        +        volumeMounts: []
        +      volumes: []
          serviceAccountName: controller-manager
          terminationGracePeriodSeconds: 10
        ...
        ```
  - description: >
      (go/v4) For Go-based operators, a fix has been implemented to ensure that the Prometheus
      configuration can properly scrape metrics from the operator's metrics server
      when TLS is enabled.
    kind: "change"
    breaking: false
    migration:
      header: Update your project to properly support TLS for Prometheus scraping
      body: |
        **Changes required under the hood `config/prometheus/`**
        
        - 1. Update the `config/prometheus/kutomization.yaml` add at the bottom:
        
        ```yaml
              # [PROMETHEUS-WITH-CERTS] The following patch configures the ServiceMonitor in ../prometheus
              # to securely reference certificates created and managed by cert-manager.
              # Additionally, ensure that you uncomment the [METRICS WITH CERTMANAGER] patch under config/default/kustomization.yaml
              # to mount the "metrics-server-cert" secret in the Manager Deployment.
              #patches:
              #  - path: monitor_tls_patch.yaml
              #    target:
              #      kind: ServiceMonitor
        ```
        
        - 2. Add the file [config/prometheus/monitor_tls_patch.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/prometheus/monitor_tls_patch.yaml) to do the patch for the ServiceMonitor.
  - description: >
      (go/v4) For Go-based operators, a fix has been implemented to ensure that CA injection patches
      are applied only to CRDs that define a conversion webhook.

      Previously, the CA injection patch logic was overly broad â€” applying injection annotations
      to all CRDs whenever a webhook was scaffolded with the `--conversion` flag. This behavior
      was introduced in Kubebuilder release `v3.5.0` when replacements were introduced in place of legacy vars
      and the `kustomize/v2-alpha` plugin was adopted.

      The incorrect behavior likely went unnoticed due to incomplete support for conversion webhooks
      in earlier versions. This release addresses that gap, enabling proper scaffolding and CA injection
      behavior specifically for CRDs with conversion webhooks.

      To support this improvement, a new marker has been introduced:
      `+kubebuilder:scaffold:crdkustomizecainjectionns`. This marker ensures that
      the correct replacements are generated in `config/default/kustomization.yaml`
      for CA injection. Additionally, the `kubebuilder:scaffold:crdkustomizewebhookpatch`
      marker was created to ensure that the webhook patch is only applied to CRDs
      that have a conversion webhook in the `config/crd/kustomization.yaml` file.

      For more information on this and other scaffolding markers,
      refer to the official Kubebuilder documentation:
      https://book.kubebuilder.io/reference/markers/scaffold
    kind: "change"
    breaking: false
    migration:
      header: Update your project to properly support CA injection for CRDs with conversion webhooks
      body: |
        **Changes required under the hood `config/crd/`**
        
        - 1. Update the `config/crd/kustomization.yaml` for the file to include the new marker
        `+kubebuilder:scaffold:crdkustomizewebhookpatch` for the tool be able to inject
        the path for any new CRD that is created with the `--conversion` flag.
        - 2. Ensure that under the patches section you have only patches for the CRDs which
        are created with the `--conversion` flag.
        - 3. Remove the files prefixed with `cainjection_<kind>.yaml`. You should have only
        the files prefixed with `webhookpatch_<kind>.yaml` for the CRDs that have the
        `--conversion` flag. ([example](https://github.com/kubernetes-sigs/kubebuilder/tree/v4.5.2/testdata/project-v4/config/crd/patches))

        **Changes required under the hood `config/default/`**
        
        - 1. Update the `config/default/kustomization.yaml` for the file to include the new marker
        `+kubebuilder:scaffold:crdkustomizecainjectionns` for the tool be able to inject for any new CRD
        that is created with the `--conversion` flag as well to have commented the default replacement.
        For further information see an example in Kubebuilder testdata samples [testdata/project-v4/config/default/kustomization.yaml](https://github.com/kubernetes-sigs/kubebuilder/blob/7c707052daa2e8bd51f47548c02710b1f1f7a77e/testdata/project-v4/config/default/kustomization.yaml#L157-L252).
        
        **NOTE:** You can see the complete file in the repository for the tag release `v1.40.0`: [testdata/go/v4/memcached-operator/config/default/kustomization.yaml](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/default/kustomization.yaml)
  - description: >
      (go/v4) For Go-based operators, controllers now use `.Named("<Kind>")` in 
      `SetupWithManager` to prevent naming conflicts in multi-group projects.
      ([More info](https://github.com/kubernetes-sigs/kubebuilder/pull/4162))

    kind: addition
    breaking: false

    migration:
      header: Use `.Named("<Kind>")` in SetupWithManager for controller registration
      body: |
        To improve clarity and avoid naming collisions in multi-group Go-based operator projects,
        each controller's `SetupWithManager` call now includes an explicit `.Named("<Kind>")` declaration.
        
        Example change:
        ```go
        func (r *DeploymentReconciler) SetupWithManager(mgr ctrl.Manager) error {
          return ctrl.NewControllerManagedBy(mgr).
            For(&appsv1.Deployment{}).
            Named("apps-deployment").
            Complete(r)
          }
        ```
        
        This ensures controller names are unique and consistent across different APIs in multi-group scenarios,
        which improves controller lifecycle management and logging.
  - description: >
      (go/v4) For Go-based operators, ENVTEST version management is now automated by 
      deriving values from `go.mod`, and controller tests now locate binaries dynamically. 
      ([More info](https://github.com/kubernetes-sigs/kubebuilder/pull/4401))
      
      These updates improve the developer experience by:
      - Reducing manual configuration for ENVTEST.
      - Ensuring IDEs or test runners can locate the binaries reliably.
      - Making controller test scaffolding more robust and portable.

    kind: change
    breaking: false

    migration:
      header: ENVTEST version automation and improved test binary discovery
      body: |
        The SDK now automates the setup of ENVTEST for Go-based operators by dynamically deriving
        the required versions from `go.mod` rather than requiring manual updates in the Makefile.
        
        1. Update the `Makefile`:
        - The variables `ENVTEST_VERSION` and `ENVTEST_K8S_VERSION` are now computed using `go list`:
          ```makefile
          ENVTEST_VERSION := $(shell go list -m -f "{{ .Version }}" sigs.k8s.io/controller-runtime | awk -F'[v.]' '{printf "release-%d.%d", $$2, $$3}')
          ENVTEST_K8S_VERSION := $(shell go list -m -f "{{ .Version }}" k8s.io/api | awk -F'[v.]' '{printf "1.%d", $$3}')
          ```
        - A new target `setup-envtest` was introduced to automatically install the binaries:
          ```makefile
          .PHONY: setup-envtest
          setup-envtest:
          	@$(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path || { \
          	  echo "Error setting up envtest"; exit 1; }
          ```
        - The `test` target now depends on `setup-envtest` to ensure binaries are ready before running tests.
        
        2. Update the suite_test.go files for controllers and webhooks:
        In each `internal/controller/suite_test.go` and `internal/webhook/<version>/webhook/suite_test.go` file:
        - A new helper function `getFirstFoundEnvTestBinaryDir()` was added:
          ```go
          func getFirstFoundEnvTestBinaryDir() string {
            basePath := filepath.Join("..", "..", "..", "bin", "k8s")
            entries, err := os.ReadDir(basePath)
            if err != nil {
                logf.Log.Error(err, "Failed to read directory", "path", basePath)
                return ""
            }
            for _, entry := range entries {
                if entry.IsDir() {
                    return filepath.Join(basePath, entry.Name())
                }
            }
            return ""
          }
          ```
        - `testEnv.BinaryAssetsDirectory` now uses this helper to locate installed ENVTEST binaries:
          ```go
          testEnv = &envtest.Environment{
            BinaryAssetsDirectory: getFirstFoundEnvTestBinaryDir(),
            ...
          }
          ```
  - description: >
      (go/v4) For Go-based operators, updated GolangCI-Lint configuration to replace 
      the deprecated `exportloopref` linter with the `copyloopvar` linter. 

    kind: change
    breaking: false

    migration:
      header: Replace `exportloopref` with `copyloopvar` in `.golangci.yaml`
      body: |
        The `exportloopref` linter has been deprecated in recent versions of GolangCI-Lint.
        It is now replaced with the more accurate and actively maintained `copyloopvar` linter.
        
        Update your `.golangci.yaml` file by replacing:
        ```yaml
        - exportloopref
        ```
        With:
        ```yaml
        - copyloopvar
        ```
  - description: >
      (go/v4) For Go-based operators, a new Makefile target named `lint-config` has been added to verify that your `.golangci.yaml`
      configuration file is valid. This helps catch issues early when customizing lint rules.

      ([More info](https://github.com/kubernetes-sigs/kubebuilder/pull/4462))

    kind: addition
    breaking: false

    migration:
      header: Add `lint-config` target to Makefile to verify linter configuration
      body: |
        The target uses the `config verify` subcommand provided by `golangci-lint`:
        
        ```makefile
        .PHONY: lint-config
        lint-config: golangci-lint ## Verify golangci-lint linter configuration
        	$(GOLANGCI_LINT) config verify
        ```
  - description: >
      (go/v4) For Go-based operators, upgraded project scaffolding to Go 1.23, 
      Kubernetes v0.32.1, and controller-runtime v0.20.4.

      The default project scaffolding for Go-based operators has been updated to use:
        - **Go 1.23**
        - **Kubernetes modules v0.32.1**
        - **controller-runtime v0.20.4**
        - **Ginkgo v2.22.0** and **Gomega v1.36.1**

    kind: change
    breaking: false

    migration:
      header: Upgrade to Go 1.23 and Kubernetes v0.32.1 dependencies
      body: |
        1. Update your `go.mod` to reflect the new versions:
        ```go
        go 1.23
        
        require (
          github.com/onsi/ginkgo/v2 v2.22.0
          github.com/onsi/gomega v1.36.1
          k8s.io/api v0.32.1
          k8s.io/apimachinery v0.32.1
          k8s.io/client-go v0.32.1
          k8s.io/utils v0.0.0-20241104100929-3ea5e8cea738
          sigs.k8s.io/controller-runtime v0.20.4
        )
        ```
        
        2. Update the Go toolchain in your `Dockerfile` to match:
        ```dockerfile
        FROM golang:1.23 AS builder
        ```
  - description: >
      (go/v4) For Go-based operators, upgraded controller-runtime from `v0.19.4` to `v0.20.0` and added support for Kubernetes 1.32. 
      Removed deprecated `webhook.Validator` and `webhook.Defaulter` interfaces from the runtime.
      Webhooks should no longer reside under the `api/` directoryâ€”this has been the default behavior since Kubebuilder
      rlease [v4.3.0)(https://github.com/kubernetes-sigs/kubebuilder/releases/tag/v4.3.0). 
      
      A `--legacy=true` flag was added to support scaffolding webhooks in the old layout when needed.
      ([More info](https://github.com/kubernetes-sigs/kubebuilder/pull/4492) Â· 
      [Migration guide](https://github.com/kubernetes-sigs/kubebuilder/releases/tag/v4.3.0))
    kind: change
    breaking: true
    migration:
      header: You must change your webhooks implementation to be able to use controller-runtime v0.20.0+
      body: |
        If you have no webhooks, you can skip this migration. Otherwise, ensure that you check the described
        steps to update your project in the release notes of Kubebuilder `v4.3.0` release: https://github.com/kubernetes-sigs/kubebuilder/releases/tag/v4.3.0
  - description: >
      For ALL-based operators, scaffolded resources now include the `app.kubernetes.io/name` label to support
      Kubernetes best practices for app identification. ([More info](https://github.com/kubernetes-sigs/kubebuilder/pull/4437/files))

    kind: addition
    breaking: false

    migration:
      header: Add `app.kubernetes.io/name` label to your manifests
      body: |
        The Operator SDK now adds the `app.kubernetes.io/name` label to scaffolded Kubernetes
        manifests such as Deployments, Services, and RBAC resources. This label aligns with
        Kubernetes labeling conventions and improves compatibility with observability and automation tools.
        
        If upgrading from a previous version, you may want to add the following label manually
        to your existing manifests:
        
        ```yaml
        metadata:
          labels:
            app.kubernetes.io/name: <your-app-name>
        ```
  - description: >
      For ALL-based operators, new role manifests are now scaffolded under the `config/rbac/` directory
      to assist cluster administrators. For each API defined in the project, three role files are generated:
      `<kind>_admin_role.yaml`, `<kind>_editor_role.yaml`, and `<kind>_viewer_role.yaml`.
      
      These roles are not applied by default. Instead, they are provided as helpers, allowing cluster
      administrators to customize and apply appropriate permissions as needed.
      
      The primary motivation for scaffolding these roles is to simplify integration with Kubernetes'
      aggregated roles mechanism. By including annotations such as
      `rbac.authorization.k8s.io/aggregate-to-admin: "true"`,
      `rbac.authorization.k8s.io/aggregate-to-edit: "true"`, and
      `rbac.authorization.k8s.io/aggregate-to-view: "true"`, these role definitions can automatically
      contribute permissions to the default admin, edit, and view roles in a cluster when applied.
      
      For more information on Kubernetes RBAC and aggregated roles, see:
      https://kubernetes.io/docs/reference/access-authn-authz/rbac/
    kind: "addition"
    breaking: false
    migration:
      header: With you wish manually add those roles to your project
      body: |
        See the permissions and RBAC generate as an example to know how properly
        create those files for each CRD you have in your project by looking at the
        sample in the repository for the tag release `v1.40.0`: [testdata/go/v4/memcached-operator/config/rbac](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/rbac)
  - description: >
      For ALL-based operators, new role manifests are now scaffolded under the `config/rbac/` directory
      to assist cluster administrators. For each API defined in the project, three role files are generated:
      `<kind>_admin_role.yaml`, `<kind>_editor_role.yaml`, and `<kind>_viewer_role.yaml`.
      
      These roles are not applied by default. Instead, they are provided as helpers, allowing cluster
      administrators to customize and apply appropriate permissions as needed.
      
      The primary motivation for scaffolding these roles is to simplify integration with Kubernetes'
      aggregated roles mechanism. By including annotations such as
      `rbac.authorization.k8s.io/aggregate-to-admin: "true"`,
      `rbac.authorization.k8s.io/aggregate-to-edit: "true"`, and
      `rbac.authorization.k8s.io/aggregate-to-view: "true"`, these role definitions can automatically
      contribute permissions to the default admin, edit, and view roles in a cluster when applied.
      
      For more information on Kubernetes RBAC and aggregated roles, see:
      https://kubernetes.io/docs/reference/access-authn-authz/rbac/
    kind: "addition"
    breaking: false
    migration:
      header: With you wish manually add those roles to your project
      body: |
        See the permissions and RBAC generate as an example to know how properly
        create those files for each CRD you have in your project by looking at the
        sample in the repository for the tag release `v1.40.0`: [testdata/go/v4/memcached-operator/config/rbac](https://github.com/operator-framework/operator-sdk/tree/v1.40.0/testdata/go/v4/memcached-operator/config/rbac)
